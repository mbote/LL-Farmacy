// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using farmacia.Models;

#nullable disable

namespace farmacia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220714111149_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("farmacia.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgendaId"), 1L, 1);

                    b.Property<int>("HorarioId")
                        .HasColumnType("int");

                    b.Property<int>("ServicoFuncionarioId")
                        .HasColumnType("int");

                    b.HasKey("AgendaId");

                    b.HasIndex("HorarioId");

                    b.HasIndex("ServicoFuncionarioId");

                    b.ToTable("Agenda", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClienteId"), 1L, 1);

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.HasKey("ClienteId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Funcionario", b =>
                {
                    b.Property<int>("FuncionarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuncionarioId"), 1L, 1);

                    b.Property<int>("PessoaId")
                        .HasColumnType("int");

                    b.Property<int>("TipoFuncionarioId")
                        .HasColumnType("int");

                    b.Property<string>("numeroOrdem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuncionarioId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("farmacia.Models.Horario", b =>
                {
                    b.Property<int>("HorarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorarioId"), 1L, 1);

                    b.Property<string>("dia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HorarioId");

                    b.ToTable("Horario", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Marcacao", b =>
                {
                    b.Property<int>("MarcacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarcacaoId"), 1L, 1);

                    b.Property<int?>("AgendaId")
                        .HasColumnType("int");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("int");

                    b.HasKey("MarcacaoId");

                    b.HasIndex("AgendaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Marcacao", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Pessoa", b =>
                {
                    b.Property<int>("PessoaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PessoaId"), 1L, 1);

                    b.Property<string>("bi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefone")
                        .HasColumnType("int");

                    b.HasKey("PessoaId");

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Servico", b =>
                {
                    b.Property<int>("ServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicoId"), 1L, 1);

                    b.Property<int?>("TipoServicoId")
                        .HasColumnType("int");

                    b.Property<string>("servico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServicoId");

                    b.HasIndex("TipoServicoId");

                    b.ToTable("servicos");
                });

            modelBuilder.Entity("farmacia.Models.ServicoFuncionario", b =>
                {
                    b.Property<int>("ServicoFuncionarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServicoFuncionarioId"), 1L, 1);

                    b.Property<int>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<int>("ServicoId")
                        .HasColumnType("int");

                    b.HasKey("ServicoFuncionarioId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ServicoFuncionario");
                });

            modelBuilder.Entity("farmacia.Models.TipoServico", b =>
                {
                    b.Property<int>("TipoServicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoServicoId"), 1L, 1);

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipoServicoId");

                    b.ToTable("TipoServico", (string)null);
                });

            modelBuilder.Entity("farmacia.Models.Agenda", b =>
                {
                    b.HasOne("farmacia.Models.Horario", null)
                        .WithMany("agenda")
                        .HasForeignKey("HorarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("farmacia.Models.ServicoFuncionario", null)
                        .WithMany("agenda")
                        .HasForeignKey("ServicoFuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("farmacia.Models.Cliente", b =>
                {
                    b.HasOne("farmacia.Models.Pessoa", "pessoa")
                        .WithMany("cliente")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pessoa");
                });

            modelBuilder.Entity("farmacia.Models.Funcionario", b =>
                {
                    b.HasOne("farmacia.Models.Pessoa", null)
                        .WithMany("funcionario")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("farmacia.Models.Marcacao", b =>
                {
                    b.HasOne("farmacia.Models.Agenda", null)
                        .WithMany("marcacao")
                        .HasForeignKey("AgendaId");

                    b.HasOne("farmacia.Models.Cliente", null)
                        .WithMany("marcacao")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("farmacia.Models.Servico", b =>
                {
                    b.HasOne("farmacia.Models.TipoServico", null)
                        .WithMany("Servicos")
                        .HasForeignKey("TipoServicoId");
                });

            modelBuilder.Entity("farmacia.Models.ServicoFuncionario", b =>
                {
                    b.HasOne("farmacia.Models.Funcionario", null)
                        .WithMany("servicoFuncionario")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("farmacia.Models.Servico", null)
                        .WithMany("servicoFuncionario")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("farmacia.Models.Agenda", b =>
                {
                    b.Navigation("marcacao");
                });

            modelBuilder.Entity("farmacia.Models.Cliente", b =>
                {
                    b.Navigation("marcacao");
                });

            modelBuilder.Entity("farmacia.Models.Funcionario", b =>
                {
                    b.Navigation("servicoFuncionario");
                });

            modelBuilder.Entity("farmacia.Models.Horario", b =>
                {
                    b.Navigation("agenda");
                });

            modelBuilder.Entity("farmacia.Models.Pessoa", b =>
                {
                    b.Navigation("cliente");

                    b.Navigation("funcionario");
                });

            modelBuilder.Entity("farmacia.Models.Servico", b =>
                {
                    b.Navigation("servicoFuncionario");
                });

            modelBuilder.Entity("farmacia.Models.ServicoFuncionario", b =>
                {
                    b.Navigation("agenda");
                });

            modelBuilder.Entity("farmacia.Models.TipoServico", b =>
                {
                    b.Navigation("Servicos");
                });
#pragma warning restore 612, 618
        }
    }
}
