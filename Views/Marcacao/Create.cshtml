@model dynamic;

@{
    ViewData["Title"] = "Create";
}

<div class="container" id="linkGen" style="margin-bottom:20px; margin-top:70px;">
    <p style="color:#212529; font-size: 20px;"><a asp-action="Index"
            style="text-decoration: none;color:#212529">Marcação/</a>registar</p>
</div>

<div class="container pt-3 pb-1" id="headCliente" style="box-shadow: 1px 5px 15px #888888; margin-top:0px">
    <h5>Nova marcação</h5>
    <hr />
    <form method="post" action="Create">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">

            <div class="col-md-12">
                <label for="nome" class="form-label">Nome do cliene</label>
            </div>
            <div class="col-md-9">
                <div class="autocomplete">
                    <input name="consulta" id="myInput" placeholder="Consultar" type="text"
                        class="form-control form-control-lg" value="" style="width: 1250px;">
                    <p for="nome" id="msg" class="form-label" style="color: red;"></p>
                </div>
            </div>
            <div class="col-md-2">
                <a asp-action="CreateUser" class="btn btn-success"
                    style="width: 40px; float: right; margin-right:-110px; margin-top:3px;"> + </a>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="mb-3">
                    <label for="nome" class="form-label">Serviço</label>
                    <select for="tipo" class="form-control form-select form-control-lg" name="idServico" id="idServico"
                        required>
                        <option value=""></option>
                    </select>
                    <span validation-for="tipo" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="nome" class="form-label">Especialista</label>
                    <select for="tipo" class="form-control form-select form-control-lg" name="idServcioFuncionario"
                        id="idServcioFuncionario" required>
                        <option value=""></option>
                    </select>
                    <span validation-for="tipo" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="nome" class="form-label">Horário</label>
                    <select for="tipo" class="form-control form-select form-control-lg" name="idHorario" id="idHorario"
                        required>
                        <option value=""></option>
                    </select>
                    <span validation-for="tipo" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label for="nome" class="form-label">Outros</label>
                    <select for="tipo" class="form-control form-select form-control-lg" name="outros" id="outros"
                        required>
                        <option value=""></option>
                        <option value="">Particular</option>
                        <option value="">Seguradora</option>
                    </select>
                    <span validation-for="tipo" class="text-danger"></span>
                </div>

                <div class="mb-3" style="float:right;">
                    <input type="submit" value="Criar" class="btn btn-success" />
                    <a asp-action="Index" class="btn btn-secondary">Voltar</a>
                </div>
            </div>
        </div>
    </form>
</div>

<script src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>

@section Scripts
{
<script type="text/javascript">

    $(document).ready(function () {

        $.get("/Marcacao/getCliente/", function (data) {
            console.log(data);
            autocomplete(document.getElementById("myInput"), data);
        });

        $.get("/Marcacao/getServicos/", function (data) {
            $('#idServico').empty();
            $('#idServico').append("<option></option>");
            $.each(data, function (i, item) {
                var rows = " <option value=" + item.servicoId + ">" + item.servico + "</option>";
                $('#idServico').append(rows);
            });
        });

        $("#idServico").on('change', function () {
            $.ajax({
                type: "GET",
                url: '/Marcacao/getServicoFuncionario/' + $("#idServico").val(),
                data: '{id:' + $("#idServico").val() + '}',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#idServcioFuncionario').empty();
                    $('#idServcioFuncionario').append("<option></option>");
                    $.each(data, function (i, item) {
                        var rows = " <option value=" + item.idServcioFuncionario + ">" + item.nome + "</option>";
                        $('#idServcioFuncionario').append(rows);
                    });
                },
                error: function () {
                    alert("Error while inserting data");
                }
            });
            return false;
        });

        $("#idServcioFuncionario").on('change', function () {
            $.ajax({
                type: "GET",
                url: '/Marcacao/getHorario/' + $("#idServcioFuncionario").val(),
                data: '{id:' + $("#idServcioFuncionario").val() + '}',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $('#idHorario').empty();
                    $('#idHorario').append("<option></option>");
                    $.each(data, function (i, item) {
                        var rows = " <option value=" + item.idAgenda + ">" + item.horario + "</option>";
                        $('#idHorario').append(rows);
                    });
                },
                error: function () {
                    alert("Error while inserting data");
                }
            });
            return false;
        });
    });

    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
            if (arr.indexOf(inp.value) > -1) {
                document.getElementById("msg").innerHTML = " "
            } else {
                document.getElementById("msg").innerHTML = "Não estás registado(a), clique no botão +"
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });
    }

</script>
}